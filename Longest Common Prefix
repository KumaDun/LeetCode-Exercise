/*
Write a function to find the longest common prefix string amongst an array of strings.

If there is no common prefix, return an empty string "".

 

Example 1:

Input: strs = ["flower","flow","flight"]
Output: "fl"
Example 2:

Input: strs = ["dog","racecar","car"]
Output: ""
Explanation: There is no common prefix among the input strings.
 

Constraints:

1 <= strs.length <= 200
0 <= strs[i].length <= 200
strs[i] consists of only lowercase English letters.
*/

//PYTHON
class Solution:
    def longestCommonPrefix(self, strs: List[str]) -> str:
        shortest_len = 201;
        
        for string in strs:
            if len(string) < shortest_len:
                shortest_len = len(string)
        count = -1;
        letter_from_strs = []
        for i in range(shortest_len):
            for j in range(len(strs)):
                letter_from_strs.append(strs[j][i])
            if (all(letter == letter_from_strs[0] for letter in letter_from_strs)):
                count += 1
                letter_from_strs.clear()
            else:
                break
        
        if count>=0:
            return strs[0][0:count+1]
        else:
            return ""
            
//JAVA
class Solution {
    public String longestCommonPrefix(String[] strs) {
        int shortest_len = 201;
        for (String string : strs) {
            if (string.length()<shortest_len) {
                shortest_len = string.length();
            }
        }
        
        char[] letters = new char[strs.length];
        int letter_index = 0;
        int count = -1;
        boolean is_equal = true;
        
        for (int i=0;i<shortest_len;i++){
            for(String string:strs){
                letters[letter_index] = string.charAt(i);
                letter_index++;
            }
            for(char letter: letters){
                if(letter != letters[0]){
                    is_equal = false;
                }
            }
            if (is_equal) {
                count ++;
                letters = new char[strs.length];
                letter_index = 0;
            }
            else{
                break;
            }
        }
        
        return strs[0].substring(0,count+1);        
    }
}

//JAVA solution from others
public String longestCommonPrefix(String[] strs) {
        if (strs == null || strs.length == 0)
            return "";
        
        Arrays.sort(strs);
        String first = strs[0];
        String last = strs[strs.length - 1];
        int c = 0;
        while(c < first.length())
        {
            if (first.charAt(c) == last.charAt(c))
                c++;
            else
                break;
        }
        return c == 0 ? "" : first.substring(0, c);
    }
}

//PYTHON solution from others
class Solution:
    def longestCommonPrefix(self, S: List[str]) -> str:
        if not S: return ''
        m, M, i = min(S), max(S), 0
        for i in range(min(len(m),len(M))):
            if m[i] != M[i]: break
        else: i += 1
        return m[:i]
