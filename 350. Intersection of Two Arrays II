/*

Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must appear as many times as it shows in both arrays and you may return the result in any order.

 

Example 1:

Input: nums1 = [1,2,2,1], nums2 = [2,2]
Output: [2,2]
Example 2:

Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
Output: [4,9]
Explanation: [9,4] is also accepted.
 

Constraints:

1 <= nums1.length, nums2.length <= 1000
0 <= nums1[i], nums2[i] <= 1000

*/

//Python 

class Solution:
    def intersect(self, nums1: List[int], nums2: List[int]) -> List[int]:
        my_dic = {}
        result = []
        for i_1,num_1 in enumerate(nums1):
            if (num_1 not in my_dic):
                my_dic[num_1] = 1
            else:
                my_dic[num_1] += 1
        for i_2, num_2 in enumerate(nums2):
            if (num_2 not in my_dic):
                continue
            else:
                if my_dic[num_2] > 0:
                    result.append(num_2)
                    my_dic[num_2] -= 1
        return result
 
//JAVA

class Solution {
    public int[] intersect(int[] nums1, int[] nums2) {
        Map<Integer,Integer> my_map = new HashMap();
        int nums1_len = nums1.length;
        int nums2_len = nums2.length;
        List<Integer> my_list = new LinkedList();
        
        for (int i=0;i<nums1_len;i++) {
            if (!my_map.containsKey(nums1[i])){
                my_map.put(nums1[i],1);
            }
            else{
                my_map.replace(nums1[i],my_map.get(nums1[i])+1);
            }
        }
        
        for (int j:nums2) {
            if (my_map.containsKey(j)){
                if (my_map.get(j)>0){
                    my_list.add(j);
                    my_map.replace(j,my_map.get(j)-1);
                }
            }
        }
        return my_list.stream().mapToInt(Integer::intValue).toArray();
        
    }
}
        
        
