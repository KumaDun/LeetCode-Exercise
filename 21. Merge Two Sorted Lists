https://leetcode.com/problems/merge-two-sorted-lists/

You are given the heads of two sorted linked lists list1 and list2.

Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.

Return the head of the merged linked list.

 

Example 1:


Input: list1 = [1,2,4], list2 = [1,3,4]
Output: [1,1,2,3,4,4]
Example 2:

Input: list1 = [], list2 = []
Output: []
Example 3:

Input: list1 = [], list2 = [0]
Output: [0]
 

Constraints:

The number of nodes in both lists is in the range [0, 50].
-100 <= Node.val <= 100
Both list1 and list2 are sorted in non-decreasing order.

//PYTHON IMPROVED ITERATIVE

class Solution:
    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:
        head = new_list = ListNode(0)
        
        while (list1 and list2):
            if list1.val < list2.val:
                new_list.next = ListNode(list1.val)
                new_list = new_list.next
                list1 = list1.next
            else:
                new_list.next = ListNode(list2.val)
                new_list = new_list.next
                list2 = list2.next
        new_list.next = list1 or list2
        return head.next

//PYTHON IMPROVED RECURSIVE

class Solution:
    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:
        if (not list1) or (not list2):
            return list1 or list2
        if list1.val<list2.val:
            list1.next = self.mergeTwoLists(list1.next,list2)
            return list1
        else:
            list2.next = self.mergeTwoLists(list1,list2.next)
            return list2
            
//PYTHON
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:
        if list1 == None:
            return list2
        if list2 == None:
            return list1
        
        value_1 = list1.val
        value_2 = list2.val
        current_list1_node = list1
        current_list2_node = list2
        flag_1 = True
        flag_2 = True
        
        if value_1<value_2:
            head = ListNode(value_1)
            current_list1_node = current_list1_node.next
            if current_list1_node != None:
                value_1 = current_list1_node.val
            else:
                flag_1 = False
        else:
            head = ListNode(value_2)
            current_list2_node = current_list2_node.next
            if current_list2_node != None:
                value_2 = current_list2_node.val
            else:
                flag_2 = False
            
        current_new_node = head
        
        
        while(True):
            if (flag_1 == False):
                current_new_node.next =current_list2_node
                break
                
            if (flag_2 == False):
                current_new_node.next = current_list1_node
                break
                
            if value_1<value_2:
                current_new_node.next = ListNode(value_1)
                current_new_node = current_new_node.next
                current_list1_node = current_list1_node.next
                if current_list1_node != None:
                    value_1 = current_list1_node.val
                else:
                    flag_1 = False
            else:
                current_new_node.next = ListNode(value_2)
                current_new_node = current_new_node.next
                current_list2_node = current_list2_node.next
                if current_list2_node != None:
                    value_2 = current_list2_node.val
                else:
                    flag_2 = False
                
              
        return head
                
